hello everyone in this video we are
going to learn how to send HTTP requests
with your Blazer webassembly application
and after that we're going to see how to
create services and then we're going to
see how to use dependency injection also
we are going to focus on the types of
dependency injections such as Singleton
scoped and transient and finally we're
going to learn about three ways to
inject dependencies in place a web
assembly and that is construct injection
and inject keyword and inject attribute
we're going to see when to use these
three types of injections to send HTTP
requests we're using a familiar object
and that is HTTP client any.net
developer knows about this object we're
using the same thing but since we are
working with a front-end technology we
mainly work with Json objects and that
is why we're using HTTP client Json
extensions to send HTTP requests that
are based on Json and objects and this
is where we ended our last video we have
created this courses application and we
have a list of courses let me increase
the size here
as you can see we have list of courses
and we saw how component inputs and
outputs work we have created two pages
as you can see when you click on it you
get directed to another page and all
these courses they are hard-coded
objects in this video we are going to
invoke an actual API to load these
courses and now let me show you the API
that we are going to use
this is a simple API that I've just
wrote and as you can see when you access
courses endpoint you're getting three
courses and when I want to get more
details about a course I can just copy
the reference ID and I can pass it here
as you can see we're getting a list of
Articles as well we are going to
integrate this API to our sample courses
application as you can see on the right
we have visual studio and in our last
video we have created two pages we have
created a list of courses and when you
click on it there's this course page if
I go into courses page if I go into the
code block here we have the list of
courses and on initialized event I have
hard-coded the values like this now
we're going to get rid of this and
invoke the actual API first I'm going to
show you the easiest way to do it I'm
just going to remove the loop and then
I'm going to add HTTP client I'm going
to create a new HTTP client object and
then I'm going to assign the result of
the HTTP get request to the courses list
let me do that now as you can see we are
familiar with getasync but some of us
are not familiar with get from Json
async method that we have here and these
methods are coming from this extensions
class and here we can add the URL for
getting our courses now if we go back
here we have the list of courses I will
copy the URL here and then paste it here
as you can see here this is an async
function we can't invoke asynchronous
functions in uninitialized method we
should use uninitialized async method
for that let me overwrite that as well
as you can see we have uninitialized
async method I'm going to copy the same
code here and then I'm going to paste it
here as well and then I'm going to add a
sync keyword because we are going to add
a right here all right
now let me remove this one as well
as you can see we have an error here and
this is happening because we haven't
specified the generic result type here
let me specify that now this is a list
of courses all right I'll run this again
as you can see on the left we are
loading the courses from an actual API
as you can see we can send HTTP requests
with only two lines like this since this
is a HTTP request even though it loads
immediately now this can take a few
seconds to load sometimes and because of
that I'm going to introduce a loader as
well to introduce a loader what I'm
going to do is I'm going to create a new
folder in www.root folder I'm going to
call it images and then I'm going to add
this loading animation dot GIF and then
I'm going to create a new folder here
let me call it
common
inside of this folder I'm going to
create a new eraser component I'm going
to call it loader like this
all right we have the component I want
to control the visibility of this loader
and because of that I'm going to add
this is visible parameter here so that I
can pass this value from the parent
component and then I'm going to show the
image like this I have a div tag and an
image here and finally I'm going to add
this if condition with this I can
control the visibility of this HTML
content here now I will save it I'm
going back to the courses component as
you can see we have the list of courses
and here we are loading the courses I'm
going to add our loader component that
we have just created as you can see we
can reference it like this and we can
set is visible attribute to true as you
can see we have a loader on the screen
and I want to display this loader only
when courses list is null
like this and then I'm going to add this
if condition here this HTML content will
be shown only if the courses list is
available this initial assignment I'm
going to get rid of that let me save it
all right now let me run this as you can
see we are seeing the loader for really
short period of time now let me maximize
this little and I'm going to enable
offline
let's see whether I can see the loader
as you can see we see that all right now
we saw how to send HTTP requests from
your Blazer webassembly application and
here we have used this get from Json
async method but you can use
post or put
or even delete methods depending on your
requirement I'm going back to get from
Json async method like this here as you
can see we have made a few bad design
choices number one is we have hard coded
this space URL here and that is not a
good thing we're going to change it in a
minute and we don't send HTTP requests
right inside of our main component we
usually use a separate service for that
and this is where dependency injection
comes in now let's understand what
dependency injection is this is a
pattern that you can use to decouple the
modules of your application and
dependency injection is an actual
implementation of dependency inversion
principle that we find in solid software
design principles now let's understand
this with an example we have courses API
and on the left we have courses app now
what we have done is we have send the
HTTP request right from our courses
component this Wireless single
responsibility principle from solid
design patterns because we're displaying
the courses in courses component and
also we are retrieving the courses from
courses API and that's why we should
think about moving the API requests to
another class and for this example we
can use two approaches and we can write
two classes as you can see on the screen
in memory courses and web API courses
let's say the backend developers broke
the web API you still have to develop
the front end right in that case we can
use a service like in-memory courses but
when the backend API is back again we
can use that so we have two classes like
this now we have implemented single
responsibility
but the closest component should not
depend on actual in memory courses or
web API courses implementations
it should depend on an interface there
should be a similar interface exposed by
in-memory courses and web API courses so
that courses component the high level
component does not need to know about
the actual low level implementation
details and that is why we can Implement
I courses provider interface in
in-memory courses and web API courses
and we can write our courses component
to depend on the interface I courses
provider but not the actual
implementations and you can easily
switch between in-memory courses and web
API courses and for development purposes
you can still use in memory courses
easily and when you want to move your
application to production you can use
web API courses and that actually invoke
courses API now we understand the
importance of using an interface to
reduce the coupling and with dependency
injection we should be able to inject in
memory courses and web API courses to
courses component and courses component
is not creating in memory courses or web
API courses where injecting those
dependencies into courses component now
we have the theoretical understanding of
what dependency injection is let's
implement this on our Play service
now I'm going into solution Explorer and
in our project I'm going to add a new
folder I'm going to call it services
like this and then I'm going to add a
new interface I'm going to call it I
courses provider like this and then I
can add an actual implementation for it
let me call it courses
provider all right now let me add a
sample method here
show you how dependency injection works
I'm going to add a method like this I'm
going to call it get ID all right and
then I'm going to courses provider and
here I'm going to implement
I courses provider interface I'm going
to implement this as you can see we have
a method to show you how dependency
injection works I'm going to create a
new property here it's going to be a
private string let me call it grid all
right and then I'm going to return it
now let's say I want to invoke this
method from our courses list for that
I'm going to pages and courses now there
are a few ways for me to access I
courses provide interface from the
courses component one way is using
inject
keyword like this I'm going to inject my
courses provider
let me call it courses provided like
this as you can see we're getting the
message
courses provider could not be found and
we can add a using like this so that the
error goes away now let's see whether I
can display the grid let me show that in
H1 tag I'm going to work courses
provider dot get ID like this and I'm
going to save it as you can see the
application
is broken let's see what happened there
I'm going to console if we focus here
there's no registered service of type
icosis provider and this is happening
because we haven't registered I courses
provider interface in our Blazer
Services section I'm going to program.cs
as you can see and then I can register
the dependency here let me add a comment
and I can access builder.services like
this and I can add the dependency here
there are three options for me one is
ADD scoped and add transient and add
Singleton first let's try with ADD
Singleton this is a generic method we
can pass in
icosys provider like this all right and
then the actual courses provider and let
me save it now and run it again we are
seeing the grid that we have returned
for more courses provider now if I try
to
switch between these components as you
can see we are seeing the same grid over
and over again but when I refresh it
we're getting different grids now let me
change this to add Transit since we are
making changes to our program.cs I'm
running it again
and now let's switch between these
components and each time I weave the
home component I'm getting a different
grid and if you're already familiar with
the word Singleton you already probably
have understood what happens here when
you register services with ADD Singleton
Blazer framework is using the same
object for this application until you
reload it but when you're using
transient each time when you switch
between these components a new instance
will be created also there's one other
method called scoped add scoped this
method will behave the same way as
Singleton in Blazer web assembly
applications all right I'm going to keep
this as ADD scoped now we know how to
use dependency injection but this is not
the end goal the end goal is separating
the the HTTP request that we have made
here from our weaving component for that
I'm going into courses provider and then
I'm going to remove
this and also I'm getting rid of this
showing in our courses component as well
now right now I'm going to add a method
and this will return all the courses I'm
going to save it now and I'm going to
courses provider and here we have the
option to implement that now what I'm
going to do is I'm going to call this
component and this is this component
here I'm going to move this HTTP request
to courses provider implementation for
that I'm going to copy this code
actually I'm going to cut it and remove
it from here and then I'm going to go
into courses provider implementation and
then I'm going to paste it here we have
a few errors let me fix that since this
is a list of courses we don't have to
assign it to a variable I can just
return it
and also we don't have to create this
new HTTP client here we can get it from
the dependency injection for that what I
can do is I can just
create a Constructor like this and get
the HTTP client
using Constructor injection you can use
Constructor injection to get
dependencies into your services but for
the classes that you have a Razer
representation you can use either
inject keyword or inject attribute which
I will show in few seconds now that we
have HTTP client injected to courses
provider I don't have to create a new
object here I'm going to remove that as
you can see here we have hard coded the
base URL of the API and this is not a
good practice usually these are
configuration settings and these should
be kept in app settings file let me show
you how to do that now I'm going to cut
it and then I'm going into close this up
and
www.root and then here I'm going to add
a new app settings file a new item I'm
going to search for app settings file
and then I'm going to create it
all right I'm going to create this
object here to store all our
configurations and then I'm going to add
the API URL here and this is the base
URL for API all right that is done
we have removed the configuration from
the http
client request and added that to an app
settings file now if you run the
application it will not work because we
haven't added the configuration
necessary in dependency injection
configuration in program.cs as you can
see here we are injecting HTTP client
and we are setting the Base address here
what we can do is we can read The Base
address from Builder configuration and
then we can assign That Base address
here into HTTP client I will have to
change this to an URI object all right
now let me run it again as you can see
we're getting this error and that is
because we haven't imported the
namespace that contains these Json
extension methods
I'm going to import that now all right
we have this one warning here possible
null reference return I'm going to
ignore that for now all right and then
I'm going to courses dot eraser we have
removed the HTTP request from
courses.racer file the main component
here and we have moved that to courses
provider
now what we need to do is we need to
create an object of courses provider
instead of
courses.razer to access get all HTTP
method there are a few ways for you to
get a reference to courses provider
inside of courses.brazer one of the ways
is that you've seen inject attribute
since I haven't showed that to you let
me show that now we can use inject
attribute and after that we can provide
I courses provider like this and then
what we can do is we can invoke courses
provider.get all method to get all the
courses
let me do that now as you can see that's
done
I'm going to save it all right let me
save this now as you can see app seems
to be broken
um let me go into the console and here
seems like a configuration issue I'm
going to app settings and program with
cs as you can see I have given the wrong
name here let me change that
all right as you can see the app works
now if I click on a course I'm getting
redirected into this page that has a
list of Articles and a description just
for the completion of this app I'm going
to do few changes let me do that now
all right as you can see I have made few
changes to course.tracer file and I have
also introduced these articles list in
course.cs now if I
maximize the app and go back to the list
of courses and if I click on each of
these courses I can get the actual list
of Articles as you can see you're
getting the actual data from the API
that I've shown now we have two methods
in courses provider class for getting
the list of courses and forgetting more
information about a course in this video
we learned about HTTP requests and
dependency injection in Blazer
webassembly we learned all that while
developing a sample application as well
if you have any questions or comments
let me know down below and also let me
know if you want any specific videos on
Blazer don't forget to like this video
And subscribe if you learn something new
today and I will see you in the next one